plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
}

architectury {
    platformSetupLoomIde()
    fabric()
}
sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/generated/resources"
            ]
        }
    }
}
loom {
    runs {
        data {
            client()
            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
//            vmArg "-Dfabric-api.datagen.strict-validation"
            source sourceSets.main
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_version}") {
        exclude(module: "fabric-api")
    }
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modRuntimeOnly("com.terraformersmc:modmenu:${rootProject.mod_menu_version}") { transitive false }

    modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}") { transitive false }
    modImplementation("com.withertech:mine_flux-fabric:${rootProject.flux_version}") {
        exclude(module: "fabric-api")
    }
    modImplementation("com.withertech:mine_tags-fabric:${rootProject.tags_version}") {
        exclude(module: "fabric-api")
    }
    modImplementation("com.withertech:mine_gui-fabric:${rootProject.gui_version}") {
        exclude(module: "fabric-api")
    }
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand(rootProject.properties)
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}
publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java

            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    if (dep.artifactId.last().value().last() in ["modmenu", "RoughlyEnoughItems-fabric"]) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (System.getenv("MAVEN_PASS") != null) {
            maven {
                name = "WitherTech"
                url = "http://maven.withertech.com/repository/withertech/"
                allowInsecureProtocol = true
                credentials {
                    username = "admin"
                    password = System.getenv("MAVEN_PASS")
                }
            }
        }
    }
}

curseforge {
    if (System.getenv("CURSE_API_KEY") != null) {
        apiKey = System.getenv("CURSE_API_KEY")
        project {
            id = "570667"
            releaseType = "$rootProject.cf_type"
            changelogType = "html"
            changelog = releaseChangelog()
            addGameVersion "1.18.1"
            addGameVersion "1.18"
            addGameVersion "1.18-Snapshot"
            addGameVersion "Java 17"
            addGameVersion "Fabric"
            relations {
                requiredDependency "architectury-fabric"
                requiredDependency "cloth-config"
                requiredDependency "mine-flux-api"
                requiredDependency "mine-tags-api"
                requiredDependency "mine-gui-api"
            }
            mainArtifact(remapJar.archivePath) {
                displayName = "[Fabric $rootProject.minecraft_version] v$project.version"
            }
            afterEvaluate {
                uploadTask.dependsOn("build")
            }
        }
        options {
            forgeGradleIntegration = false
            javaVersionAutoDetect = false
        }
    }
}

rootProject.tasks.getByName("curseforgePublish").dependsOn tasks.getByName("curseforge")

task decompile {
    dependsOn rootProject.tasks.getByName("decompile")
}